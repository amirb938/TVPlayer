package com.tv.core.util

import com.google.android.exoplayer2.PlaybackException

class TvPlayBackException(val errorMessage : String?, val errorCode: Int) : Exception() {
    companion object {
        const val ERROR_CODE_UNSPECIFIED = PlaybackException.ERROR_CODE_UNSPECIFIED
        const val ERROR_CODE_REMOTE_ERROR = PlaybackException.ERROR_CODE_REMOTE_ERROR
        const val ERROR_CODE_BEHIND_LIVE_WINDOW = PlaybackException.ERROR_CODE_BEHIND_LIVE_WINDOW
        const val ERROR_CODE_TIMEOUT = PlaybackException.ERROR_CODE_TIMEOUT
        const val ERROR_CODE_FAILED_RUNTIME_CHECK =
            PlaybackException.ERROR_CODE_FAILED_RUNTIME_CHECK
        const val ERROR_CODE_IO_UNSPECIFIED = PlaybackException.ERROR_CODE_IO_UNSPECIFIED
        const val ERROR_CODE_IO_NETWORK_CONNECTION_FAILED =
            PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED
        const val ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT =
            PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT
        const val ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE =
            PlaybackException.ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE
        const val ERROR_CODE_IO_BAD_HTTP_STATUS = PlaybackException.ERROR_CODE_IO_BAD_HTTP_STATUS
        const val ERROR_CODE_IO_FILE_NOT_FOUND = PlaybackException.ERROR_CODE_IO_FILE_NOT_FOUND
        const val ERROR_CODE_IO_NO_PERMISSION = PlaybackException.ERROR_CODE_IO_NO_PERMISSION
        const val ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED =
            PlaybackException.ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED
        const val ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE =
            PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE
        const val ERROR_CODE_PARSING_CONTAINER_MALFORMED =
            PlaybackException.ERROR_CODE_PARSING_CONTAINER_MALFORMED
        const val ERROR_CODE_PARSING_MANIFEST_MALFORMED =
            PlaybackException.ERROR_CODE_PARSING_MANIFEST_MALFORMED
        const val ERROR_CODE_PARSING_CONTAINER_UNSUPPORTED =
            PlaybackException.ERROR_CODE_PARSING_CONTAINER_UNSUPPORTED
        const val ERROR_CODE_PARSING_MANIFEST_UNSUPPORTED =
            PlaybackException.ERROR_CODE_PARSING_MANIFEST_UNSUPPORTED
        const val ERROR_CODE_DECODER_INIT_FAILED = PlaybackException.ERROR_CODE_DECODER_INIT_FAILED
        const val ERROR_CODE_DECODER_QUERY_FAILED =
            PlaybackException.ERROR_CODE_DECODER_QUERY_FAILED
        const val ERROR_CODE_DECODING_FAILED = PlaybackException.ERROR_CODE_DECODING_FAILED
        const val ERROR_CODE_DECODING_FORMAT_EXCEEDS_CAPABILITIES =
            PlaybackException.ERROR_CODE_DECODING_FORMAT_EXCEEDS_CAPABILITIES
        const val ERROR_CODE_DECODING_FORMAT_UNSUPPORTED =
            PlaybackException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED
        const val ERROR_CODE_AUDIO_TRACK_INIT_FAILED =
            PlaybackException.ERROR_CODE_AUDIO_TRACK_INIT_FAILED
        const val ERROR_CODE_AUDIO_TRACK_WRITE_FAILED =
            PlaybackException.ERROR_CODE_AUDIO_TRACK_WRITE_FAILED
        const val ERROR_CODE_DRM_UNSPECIFIED = PlaybackException.ERROR_CODE_DRM_UNSPECIFIED
        const val ERROR_CODE_DRM_SCHEME_UNSUPPORTED =
            PlaybackException.ERROR_CODE_DRM_SCHEME_UNSUPPORTED
        const val ERROR_CODE_DRM_PROVISIONING_FAILED =
            PlaybackException.ERROR_CODE_DRM_PROVISIONING_FAILED
        const val ERROR_CODE_DRM_CONTENT_ERROR = PlaybackException.ERROR_CODE_DRM_CONTENT_ERROR
        const val ERROR_CODE_DRM_LICENSE_ACQUISITION_FAILED =
            PlaybackException.ERROR_CODE_DRM_LICENSE_ACQUISITION_FAILED
        const val ERROR_CODE_DRM_DISALLOWED_OPERATION =
            PlaybackException.ERROR_CODE_DRM_DISALLOWED_OPERATION
        const val ERROR_CODE_DRM_SYSTEM_ERROR = PlaybackException.ERROR_CODE_DRM_SYSTEM_ERROR
        const val ERROR_CODE_DRM_DEVICE_REVOKED = PlaybackException.ERROR_CODE_DRM_DEVICE_REVOKED
        const val ERROR_CODE_DRM_LICENSE_EXPIRED = PlaybackException.ERROR_CODE_DRM_LICENSE_EXPIRED
        const val CUSTOM_ERROR_CODE_BASE = PlaybackException.CUSTOM_ERROR_CODE_BASE
    }

    fun getErrorCodeMessage(): String {
        return when (errorCode) {
            ERROR_CODE_FAILED_RUNTIME_CHECK -> "ERROR_CODE_FAILED_RUNTIME_CHECK"
            ERROR_CODE_IO_UNSPECIFIED -> "ERROR_CODE_IO_UNSPECIFIED"
            ERROR_CODE_IO_NETWORK_CONNECTION_FAILED -> "ERROR_CODE_IO_NETWORK_CONNECTION_FAILED"
            ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT -> "ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT"
            ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE -> "ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE"
            ERROR_CODE_IO_BAD_HTTP_STATUS -> "ERROR_CODE_IO_BAD_HTTP_STATUS"
            ERROR_CODE_IO_FILE_NOT_FOUND -> "ERROR_CODE_IO_FILE_NOT_FOUND"
            ERROR_CODE_IO_NO_PERMISSION -> "ERROR_CODE_IO_NO_PERMISSION"
            ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED -> "ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED"
            ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE -> "ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE"
            ERROR_CODE_PARSING_CONTAINER_MALFORMED -> "ERROR_CODE_PARSING_CONTAINER_MALFORMED"
            ERROR_CODE_PARSING_MANIFEST_MALFORMED -> "ERROR_CODE_PARSING_MANIFEST_MALFORMED"
            ERROR_CODE_PARSING_CONTAINER_UNSUPPORTED -> "ERROR_CODE_PARSING_CONTAINER_UNSUPPORTED"
            ERROR_CODE_PARSING_MANIFEST_UNSUPPORTED -> "ERROR_CODE_PARSING_MANIFEST_UNSUPPORTED"
            ERROR_CODE_DECODER_INIT_FAILED -> "ERROR_CODE_DECODER_INIT_FAILED"
            ERROR_CODE_DECODER_QUERY_FAILED -> "ERROR_CODE_DECODER_QUERY_FAILED"
            ERROR_CODE_DECODING_FAILED -> "ERROR_CODE_DECODING_FAILED"
            ERROR_CODE_DECODING_FORMAT_EXCEEDS_CAPABILITIES -> "ERROR_CODE_DECODING_FORMAT_EXCEEDS_CAPABILITIES"
            ERROR_CODE_DECODING_FORMAT_UNSUPPORTED -> "ERROR_CODE_DECODING_FORMAT_UNSUPPORTED"
            ERROR_CODE_AUDIO_TRACK_INIT_FAILED -> "ERROR_CODE_AUDIO_TRACK_INIT_FAILED"
            ERROR_CODE_AUDIO_TRACK_WRITE_FAILED -> "ERROR_CODE_AUDIO_TRACK_WRITE_FAILED"
            ERROR_CODE_DRM_UNSPECIFIED -> "ERROR_CODE_DRM_UNSPECIFIED"
            ERROR_CODE_DRM_SCHEME_UNSUPPORTED -> "ERROR_CODE_DRM_SCHEME_UNSUPPORTED"
            ERROR_CODE_DRM_PROVISIONING_FAILED -> "ERROR_CODE_DRM_PROVISIONING_FAILED"
            ERROR_CODE_DRM_CONTENT_ERROR -> "ERROR_CODE_DRM_CONTENT_ERROR"
            ERROR_CODE_DRM_LICENSE_ACQUISITION_FAILED -> "ERROR_CODE_DRM_LICENSE_ACQUISITION_FAILED"
            ERROR_CODE_DRM_DISALLOWED_OPERATION -> "ERROR_CODE_DRM_DISALLOWED_OPERATION"
            ERROR_CODE_DRM_SYSTEM_ERROR -> "ERROR_CODE_DRM_SYSTEM_ERROR"
            ERROR_CODE_DRM_DEVICE_REVOKED -> "ERROR_CODE_DRM_DEVICE_REVOKED"
            ERROR_CODE_DRM_LICENSE_EXPIRED -> "ERROR_CODE_DRM_LICENSE_EXPIRED"
            else -> if (errorCode >= PlaybackException.CUSTOM_ERROR_CODE_BASE) {
                "custom error code"
            } else {
                "invalid error code"
            }
        }
    }
}